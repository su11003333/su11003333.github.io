{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","Components/Badword.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","useStyles","makeStyles","theme","root","paddingTop","paddingBottom","color","heading","fontSize","fontWeight","subHeading","channelDiv","padding","channelContent","display","flexDirection","textAlign","alignItems","square","height","width","backgroundColor","rootChannel","position","overflowY","channelText","channelCard","boxShadow","tagsContainer","flexWrap","tag","marginRight","marginBottom","background","borderRadius","cross","marginLeft","Dashboard","classes","useState","useHistory","word","setWord","alert","setAlert","badWords","setBadWords","handleAlert","useEffect","db","collection","doc","onSnapshot","snapshot","data","length","set","style","anchorOrigin","vertical","horizontal","open","onClose","TransitionComponent","Fade","message","action","aria-label","onClick","container","className","item","xs","component","id","label","fullWidth","margin","variant","value","name","onChange","e","target","changeHandler","top","transform","right","event","filtered","filter","el","addBadWords","map","index","indexToRemove","_"],"mappings":"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","file":"static/js/10.7d2c4149.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { db } from \"../Firebase/Firebase\";\nimport { useHistory } from \"react-router-dom\";\nimport Fade from \"@material-ui/core/Fade\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        paddingTop: \"50px\",\n        paddingBottom: \"25px\",\n        color: \"#f0f0f0\",\n    },\n    heading: {\n        fontSize: \"2.2em\",\n        fontWeight: \"700\",\n    },\n    subHeading: {\n        fontSize: \"1.6em\",\n    },\n    channelDiv: {\n        padding: \"15px\",\n    },\n    channelContent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        textAlign: \"center\",\n        padding: \"20px\",\n        alignItems: \"center\",\n    },\n    square: {\n        height: \"80px\",\n        width: \"80px\",\n        backgroundColor: \"#8fabbd66\",\n        fontSize: \"2rem\",\n    },\n    rootChannel: {\n        height: \"calc(100vh - 185px)\",\n        position: \"relative\",\n        padding: \"15px\",\n        flexDirection: \"column\",\n\n        overflowY: \"scroll\",\n    },\n    channelText: {\n        paddingTop: \"10px\",\n        fontSize: \"1.2rem\",\n    },\n    channelCard: {\n        backgroundColor: \"#1e2439\",\n        boxShadow:\n            \"0px 3px 4px -1px rgb(0 0 0 / 17%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%)\",\n        color: \"rgb(220, 221, 222)\",\n    },\n    tagsContainer: {\n        display: \"inline-flex\",\n        flexWrap: \"wrap\"\n        // display:\"inline\"\n    },\n    tag: {\n        width: \"fit-content\",\n        padding: \"5px\",\n        marginRight: \"5px\",\n        marginBottom: \"5px\",\n        background: \"white\",\n        borderRadius: \"5px\",\n    }, cross: {\n        marginLeft: \"5px\",\n        fontSize: \"18px\",\n    }\n}));\n\nfunction Dashboard() {\n    const classes = useStyles();\n    const [events, setEvents] = useState([]);\n    const history = useHistory();\n    const [word, setWord] = useState('');\n    const [alert, setAlert] = useState(false);\n    const [badWords, setBadWords] = useState([]);\n    const removeBadWords = (indexToRemove) => {\n        setBadWords(badWords.filter((_, index) => index !== indexToRemove));\n    };\n\n    const changeHandler = (e)=>{\n        setWord(e.target.value)\n    }\n\n    const addBadWords = (e) => {\n        const filtered = badWords.filter((el) => el === word);\n        if(filtered.length !== 0){\n            handleAlert();\n            setWord('');\n            return;\n        }\n        if (word !== \"\" && filtered.length === 0) {\n            setBadWords([...badWords, word]);\n            setWord('');\n        }\n        setWord('');\n    };\n\n    const handleAlert = () => {\n        setAlert(!alert);\n      };\n    useEffect(() => {\n        db.collection(\"projectSettings\")\n            .doc(\"badWords\")\n            .onSnapshot((snapshot) => {\n                setBadWords(snapshot.data().badWords)\n            })\n    }, [])\n    useEffect(() => {\n        if (badWords.length > 0) {\n            db.collection(\"projectSettings\")\n                .doc(\"badWords\")\n                .set({ badWords: badWords })\n                setWord('');\n        }\n        \n    }, [badWords])\n\n    return (\n        <div style={{ backgroundColor: \"rgb(34 39 59)\" }}>\n                  <Snackbar\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n        open={alert}\n        onClose={handleAlert}\n        TransitionComponent={Fade}\n        message=\"重複\"\n        key={Fade}\n        action={\n          <IconButton aria-label=\"close\" color=\"inherit\" onClick={handleAlert}>\n            <CloseIcon />\n          </IconButton>\n        }\n      >\n        \n      </Snackbar>\n            <Grid container className={classes.root}>\n                <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                    <Typography component=\"h1\" className={classes.heading}>\n                        新增過濾字\n                    </Typography>\n                </Grid>\n            </Grid>\n\n            <Grid container  className={classes.rootChannel}>\n                <div style={{  position:\"relative\"}}>\n                    <TextField\n                        id=\"outlined-basic\"\n                        label=\"新增過濾字\"\n                        fullWidth\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={word}\n                        name=\"entranceSubTitle\"\n                        onChange={(e)=>changeHandler(e)}\n                        //   onKeyUp={(event) => (event.key === \"Enter\" ? addBadWords(event) : null)}\n                        style={{\n                            backgroundColor: \"rgb(45, 45, 73)\",\n                            borderRadius: \"5px\",\n                            color: \"white\",\n                            height: \"fix-content\",\n\n                        }}\n                    />\n                    <Button \n                        variant=\"contained\" \n                        style={{position:\"absolute\",top:\"55%\",transform:\"translateY(-50%)\",right:\"10px\"}}\n                        onClick={(event) => addBadWords(event)}>確認\n                        </Button>\n                </div>\n                <div className={classes.tagsContainer}>\n                    {badWords && badWords.map((item, index) => (\n                        <div className={classes.tag}><span >{item}</span><span onClick={() => removeBadWords(index)} className={classes.cross}>&times;</span></div>\n                    ))}\n                </div>\n\n            </Grid>\n        </div>\n    );\n}\n\nexport default Dashboard;\n"],"sourceRoot":""}